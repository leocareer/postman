{
	"info": {
		"_postman_id": "0c60e433-3bcc-4327-a221-f77e20ea4c2e",
		"name": "4_ServerResponse_1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23550378"
	},
	"item": [
		{
			"name": "10.1_Text_Picture",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let rabbit = \"\\n\\",
							"    (\\\\\\__/)\\n\\",
							"    (='.'=)\\n\\",
							"    E[:]|||||[:]З\\n\\",
							"    (\\\")_(\\\")\\n\";",
							"    console.log(rabbit);",
							"",
							"pm.test(\"Text Picture\", function () {",
							"    pm.expect(rabbit).to.include(\"(\\\\\\__/)\\n\\",
							"    (='.'=)\\n\\",
							"    E[:]|||||[:]З\\n\\",
							"    (\\\")_(\\\")\\n\");",
							"});",
							"",
							"pm.test(\"FAIL Text Picture\", function () {",
							"    pm.expect(rabbit).to.include(\"(\\\\\\__/)\\n\\",
							"    (='0'=)\\n\\",
							"    E[:]|||||[:]З\\n\\",
							"    (\\\")_(\\\")\\n\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://users.bugred.ru/tasks/rest/getuserfull?email=pump2@mail.com&name=pump2",
					"protocol": "http",
					"host": [
						"users",
						"bugred",
						"ru"
					],
					"path": [
						"tasks",
						"rest",
						"getuserfull"
					],
					"query": [
						{
							"key": "email",
							"value": "pump2@mail.com"
						},
						{
							"key": "name",
							"value": "pump2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "10.2_Text_String",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let rabbit = \"\\n\\",
							"    (\\\\\\__/)\\n\\",
							"    (='.'=)\\n\\",
							"    E[:]|||||[:]З\\n\\",
							"    (\\\")_(\\\")\\n\";",
							"    console.log(rabbit);",
							"",
							"pm.test(\"Text Picture 1 string\", function () {",
							"    pm.expect(rabbit).to.include(\"(\\\\\\__/)\");",
							"});",
							"",
							"pm.test(\"Text Picture 2 string\", function () {",
							"    pm.expect(rabbit).to.include(\"(='.'=)\");",
							"});",
							"",
							"pm.test(\"Text Picture 3 string\", function () {",
							"    pm.expect(rabbit).to.include(\"E[:]|||||[:]З\");",
							"});",
							"",
							"pm.test(\"Text Picture 4 string\", function () {",
							"    pm.expect(rabbit).to.include(\"(\\\")_(\\\")\");",
							"});",
							"",
							"pm.test(\"FAIL Text Picture 1 string\", function () {",
							"    pm.expect(rabbit).to.include(\".(\\\\\\__/)\");",
							"});",
							"",
							"pm.test(\"FAIL Text Picture 2 string\", function () {",
							"    pm.expect(rabbit).to.include(\".(='.'=)\");",
							"});",
							"",
							"pm.test(\"FAIL Text Picture 3 string\", function () {",
							"    pm.expect(rabbit).to.include(\".E[:]|||||[:]З\");",
							"});",
							"",
							"pm.test(\"FAIL Text Picture 4 string\", function () {",
							"    pm.expect(rabbit).to.include(\".(\\\")_(\\\")\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://users.bugred.ru/tasks/rest/getuserfull?email=pump2@mail.com&name=pump2",
					"protocol": "http",
					"host": [
						"users",
						"bugred",
						"ru"
					],
					"path": [
						"tasks",
						"rest",
						"getuserfull"
					],
					"query": [
						{
							"key": "email",
							"value": "pump2@mail.com"
						},
						{
							"key": "name",
							"value": "pump2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "11_GetIssue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"console.log(jsonData.key)",
							"",
							"pm.test(\"GetIssue TV-4\", function () {",
							"    pm.expect(jsonData.key).to.eql(\"TV-4\");",
							"});",
							"",
							"pm.test(\"FAIL GetIssue TV-4\", function () {",
							"    pm.expect(jsonData.key).to.eql(\"TV-5\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "AUaP65O4PnLFjoKqslJkCF9B",
							"type": "string"
						},
						{
							"key": "username",
							"value": "mail.for.testbase@gmail.com",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://testbase.atlassian.net/rest/api/3/issue/TV-4",
					"protocol": "https",
					"host": [
						"testbase",
						"atlassian",
						"net"
					],
					"path": [
						"rest",
						"api",
						"3",
						"issue",
						"TV-4"
					]
				}
			},
			"response": []
		},
		{
			"name": "12.1_CheckComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"",
							"pm.test(\"1 Check comment with property\", function () {",
							"    pm.expect(jsonData).to.have.property(\"body\",\"Comment 3 for 12\");",
							"});",
							"",
							"pm.test(\"2 Check comment with equal\", function () {",
							"    pm.expect(jsonData.body).to.equal(\"Comment 3 for 12\");",
							"});",
							"",
							"pm.test(\"FAIL 1 Check comment with property\", function () {",
							"    pm.expect(jsonData).to.have.property(\"body\",\"Comment for 12\");",
							"});",
							"",
							"pm.test(\"FAIL 2 Check comment with equal\", function () {",
							"    pm.expect(jsonData.body).to.equal(\"Comment for 12\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "hoxFgn2uHEQQrWw9JdSS8BF5",
							"type": "string"
						},
						{
							"key": "username",
							"value": "kewin.a@yandex.ru",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"body\": \"Comment 3 for 12\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://testbase.atlassian.net/rest/api/2/issue/BEGIN-96/comment",
					"protocol": "https",
					"host": [
						"testbase",
						"atlassian",
						"net"
					],
					"path": [
						"rest",
						"api",
						"2",
						"issue",
						"BEGIN-96",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "13_CheckCompany",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//не поняла что значит обычный запрос",
							"let jsonData = pm.response.json();",
							"",
							"pm.test(\"1 Check comment with property\", function () {",
							"    pm.expect(jsonData.companys[1]).to.have.property(\"name\",\"eggplantshop1\");",
							"}); //этого не было в лекции, можно так?",
							"",
							"pm.test(\"2 Check comment with equel\", function () {",
							"    pm.expect(jsonData.companys[1].name).to.equal(\"eggplantshop1\");",
							"});",
							"",
							"pm.test(\"3 Check comment with nested\", function () {",
							"    pm.expect(jsonData).to.have.nested.property(\"companys[1].name\",\"eggplantshop1\");",
							"});",
							"",
							"pm.test(\"FAIL 1 Check comment with property\", function () {",
							"    pm.expect(jsonData.companys[1]).to.have.property(\"name\",\"eggplantshop2\");",
							"}); //этого не было в лекции, можно так?",
							"",
							"pm.test(\"FAIL 2 Check comment with equel\", function () {",
							"    pm.expect(jsonData.companys[1].name).to.equal(\"eggplantshop2\");",
							"});",
							"",
							"pm.test(\"FAIL 3 Check comment with nested\", function () {",
							"    pm.expect(jsonData).to.have.nested.property(\"companys[1].name\",\"eggplantshop2\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://users.bugred.ru/tasks/rest/getuserfull?email=paper1@mail.com&name=paper1",
					"protocol": "http",
					"host": [
						"users",
						"bugred",
						"ru"
					],
					"path": [
						"tasks",
						"rest",
						"getuserfull"
					],
					"query": [
						{
							"key": "email",
							"value": "paper1@mail.com"
						},
						{
							"key": "name",
							"value": "paper1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "14_CheckArrays",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"",
							"pm.test(\"1 Check tasks and companys with any keys\", function () {",
							"    pm.expect(jsonData).to.have.any.keys(\"tasks\");",
							"    pm.expect(jsonData).to.have.any.keys(\"companys\");",
							"});",
							"",
							"pm.test(\"2 Check tasks and companys with to have\", function () {",
							"    pm.expect(jsonData).to.have.property(\"companys\");",
							"    pm.expect(jsonData).to.have.property(\"tasks\");",
							"});",
							"",
							"pm.test(\"FAIL 1 Check tasks and companys with any keys\", function () {",
							"    pm.expect(jsonData).to.have.any.keys(\"tasks\");",
							"    pm.expect(jsonData).to.have.any.keys(\"coompanys\");",
							"});",
							"",
							"pm.test(\"FAIL 2 Check tasks and companys with to have\", function () {",
							"    pm.expect(jsonData).to.have.property(\"coompanys\");",
							"    pm.expect(jsonData).to.have.property(\"tasks\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "paper1@mail.com",
							"type": "text"
						},
						{
							"key": "name",
							"value": "paper1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://users.bugred.ru/tasks/rest/getuserfull",
					"protocol": "http",
					"host": [
						"users",
						"bugred",
						"ru"
					],
					"path": [
						"tasks",
						"rest",
						"getuserfull"
					],
					"query": [
						{
							"key": "email",
							"value": "paper1@mail.com",
							"disabled": true
						},
						{
							"key": "name",
							"value": "paper1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}